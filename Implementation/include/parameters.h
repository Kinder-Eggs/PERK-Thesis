#ifndef PARAMS
#define PARAMS

#define Q 1021
#define Q_MASK ((1U << 10) - 1)

#ifdef FAST13
    #ifdef KAT
        #define SKSEED memcpy(sk->seed, (uint8_t[]){0xf9, 0xc1, 0x29, 0x94, 0x8d, 0x41, 0x68, 0x74, 0x78, 0x43, 0x13, 0x62, 0xce, 0x74, 0xa0, 0xab}, sizeof(sk->seed));
        #define PKSEED memcpy(pk->seed, (uint8_t[]){0x91, 0x61, 0x8f, 0xe9, 0x9a, 0x8f, 0x94, 0x20, 0x49, 0x7b, 0x24, 0x6f, 0x73, 0x5b, 0x27, 0xa0}, sizeof(pk->seed));
    
        #define MSEED memcpy(random, (uint8_t[]){0x9b, 0x4e, 0x44, 0x1b, 0xd6, 0xa7, 0x49, 0x87, 0x77, 0x99, 0xfb, 0x71, 0x1d, 0x6d, 0x1f, 0x45, 0x5e, 0x2c, 0xab, 0x5b, 0x57, 0x66, 0xa6, 0x45, 0x15, 0xd7, 0xc7, 0xad, 0x3e, 0xb6, 0x75, 0xc0, 0xfd, 0x08, 0xee, 0xbb, 0xeb, 0xbe, 0x66, 0x9b, 0xae, 0x60, 0x01, 0x86, 0x54, 0x38, 0xd8, 0x9e}, sizeof(random));
    #endif
    #define LAMBDA 128
    #define N1 79
    #define N1_BITS_TWICE 13
    #define M 35
    #define T 3
    #define N2 32
    #define THETA_TREE 5
    #define TAU 30
    #define SK_SIZE 16
    #define PK_SIZE 150
    #define SECURITY_BYTES 16
    #define SHAKE_BLOCK_SIZE 168
    #define Keccak_HashInitialize_SHAKE Keccak_HashInitialize_SHAKE128  // SHAKE128
    #define Keccak_HashInitialize_SHA3  Keccak_HashInitialize_SHA3_256
    

#elif FAST15
    #ifdef KAT
        #define SKSEED memcpy(sk->seed, (uint8_t[]){0xf9, 0xc1, 0x29, 0x94, 0x8d, 0x41, 0x68, 0x74, 0x78, 0x43, 0x13, 0x62, 0xce, 0x74, 0xa0, 0xab}, sizeof(sk->seed));
        #define PKSEED memcpy(pk->seed, (uint8_t[]){0x91, 0x61, 0x8f, 0xe9, 0x9a, 0x8f, 0x94, 0x20, 0x49, 0x7b, 0x24, 0x6f, 0x73, 0x5b, 0x27, 0xa0}, sizeof(pk->seed));
    
        #define MSEED memcpy(random, (uint8_t[]){0x9b, 0x4e, 0x44, 0x1b, 0xd6, 0xa7, 0x49, 0x87, 0x77, 0x99, 0xfb, 0x71, 0x1d, 0x6d, 0x1f, 0x45, 0x5e, 0x2c, 0xab, 0x5b, 0x57, 0x66, 0xa6, 0x45, 0x15, 0xd7, 0xc7, 0xad, 0x3e, 0xb6, 0x75, 0xc0, 0xfd, 0x08, 0xee, 0xbb, 0xeb, 0xbe, 0x66, 0x9b, 0xae, 0x60, 0x01, 0x86, 0x54, 0x38, 0xd8, 0x9e}, sizeof(random));
    #endif
    #define LAMBDA 128
    #define N1 83
    #define N1_BITS_TWICE 13
    #define M 36
    #define T 5
    #define N2 32
    #define THETA_TREE 5
    #define TAU 28
    #define SK_SIZE 16
    #define PK_SIZE 240
    #define SECURITY_BYTES 16
    #define SHAKE_BLOCK_SIZE 168
    #define Keccak_HashInitialize_SHAKE Keccak_HashInitialize_SHAKE128  // SHAKE128
    #define Keccak_HashInitialize_SHA3  Keccak_HashInitialize_SHA3_256

#elif SHORT13
    #ifdef KAT
        #define SKSEED memcpy(sk->seed, (uint8_t[]){0xf9, 0xc1, 0x29, 0x94, 0x8d, 0x41, 0x68, 0x74, 0x78, 0x43, 0x13, 0x62, 0xce, 0x74, 0xa0, 0xab}, sizeof(sk->seed));
        #define PKSEED memcpy(pk->seed, (uint8_t[]){0x91, 0x61, 0x8f, 0xe9, 0x9a, 0x8f, 0x94, 0x20, 0x49, 0x7b, 0x24, 0x6f, 0x73, 0x5b, 0x27, 0xa0}, sizeof(pk->seed));
    
        #define MSEED memcpy(random, (uint8_t[]){0x9b, 0x4e, 0x44, 0x1b, 0xd6, 0xa7, 0x49, 0x87, 0x77, 0x99, 0xfb, 0x71, 0x1d, 0x6d, 0x1f, 0x45, 0x5e, 0x2c, 0xab, 0x5b, 0x57, 0x66, 0xa6, 0x45, 0x15, 0xd7, 0xc7, 0xad, 0x3e, 0xb6, 0x75, 0xc0, 0xfd, 0x08, 0xee, 0xbb, 0xeb, 0xbe, 0x66, 0x9b, 0xae, 0x60, 0x01, 0x86, 0x54, 0x38, 0xd8, 0x9e}, sizeof(random));
    #endif
    #define LAMBDA 128
    #define N1 79
    #define N1_BITS_TWICE 13
    #define M 35
    #define T 3
    #define N2 256
    #define THETA_TREE 8
    #define TAU 20
    #define SK_SIZE 16
    #define PK_SIZE 150
    #define SECURITY_BYTES 16
    #define SHAKE_BLOCK_SIZE 168
    #define Keccak_HashInitialize_SHAKE Keccak_HashInitialize_SHAKE128  // SHAKE128
    #define Keccak_HashInitialize_SHA3  Keccak_HashInitialize_SHA3_256

#elif SHORT15
    #ifdef KAT
        #define SKSEED memcpy(sk->seed, (uint8_t[]){0xf9, 0xc1, 0x29, 0x94, 0x8d, 0x41, 0x68, 0x74, 0x78, 0x43, 0x13, 0x62, 0xce, 0x74, 0xa0, 0xab}, sizeof(sk->seed));
        #define PKSEED memcpy(pk->seed, (uint8_t[]){0x91, 0x61, 0x8f, 0xe9, 0x9a, 0x8f, 0x94, 0x20, 0x49, 0x7b, 0x24, 0x6f, 0x73, 0x5b, 0x27, 0xa0}, sizeof(pk->seed));
    
        #define MSEED memcpy(random, (uint8_t[]){0x9b, 0x4e, 0x44, 0x1b, 0xd6, 0xa7, 0x49, 0x87, 0x77, 0x99, 0xfb, 0x71, 0x1d, 0x6d, 0x1f, 0x45, 0x5e, 0x2c, 0xab, 0x5b, 0x57, 0x66, 0xa6, 0x45, 0x15, 0xd7, 0xc7, 0xad, 0x3e, 0xb6, 0x75, 0xc0, 0xfd, 0x08, 0xee, 0xbb, 0xeb, 0xbe, 0x66, 0x9b, 0xae, 0x60, 0x01, 0x86, 0x54, 0x38, 0xd8, 0x9e}, sizeof(random));
    #endif
    #define LAMBDA 128
    #define N1 83
    #define N1_BITS_TWICE 13
    #define M 36
    #define T 5
    #define N2 256
    #define THETA_TREE 8
    #define TAU 18
    #define SK_SIZE 16
    #define PK_SIZE 240
    #define SECURITY_BYTES 16
    #define SHAKE_BLOCK_SIZE 168
    #define Keccak_HashInitialize_SHAKE Keccak_HashInitialize_SHAKE128  // SHAKE128
    #define Keccak_HashInitialize_SHA3  Keccak_HashInitialize_SHA3_256

#elif FAST33
    #ifdef KAT
        #define SKSEED memcpy(sk->seed, (uint8_t[]){0x79, 0x67, 0x32, 0xac, 0xba, 0x3e, 0xfd, 0xf7, 0x31, 0xbf, 0x7c, 0x24, 0x2a, 0xee, 0xdd, 0xf5, 0xeb, 0xa5, 0xb1, 0x31, 0xda, 0x90, 0xe3, 0x6a}, sizeof(sk->seed));
        #define PKSEED memcpy(pk->seed, (uint8_t[]){0x91, 0x61, 0x8f, 0xe9, 0x9a, 0x8f, 0x94, 0x20, 0x49, 0x7b, 0x24, 0x6f, 0x73, 0x5b, 0x27, 0xa0, 0x19, 0x07, 0x8a, 0x9d, 0x3c, 0xa6, 0xb2, 0xa0}, sizeof(pk->seed));

        #define MSEED memcpy(random, (uint8_t[]){0xd5, 0xfd, 0x28, 0x49, 0x3b, 0x1e, 0x8b, 0x4d, 0x77, 0xee, 0x15, 0xf3, 0x65, 0x4f, 0x70, 0xc6, 0x4a, 0xa6, 0x54, 0x73, 0xbd, 0xd1, 0x19, 0x9d, 0xbc, 0x4b, 0xa7, 0xd9, 0xbd, 0xcb, 0xda, 0xf8, 0x2b, 0x0b, 0xca, 0x86, 0x4d, 0x79, 0x44, 0xfa, 0xa4, 0x0e, 0x94, 0xbf, 0x3b, 0xc3, 0x27, 0x4d, 0x7e, 0x68, 0xb5, 0x03, 0x56, 0x70, 0x20, 0x5d, 0x4b, 0xfc, 0xab, 0x25, 0x84, 0x7e, 0x71, 0xa1, 0xf1, 0x29, 0x74, 0x80, 0xd5, 0xc7, 0xcd, 0x36}, sizeof(random));
    #endif
    #define LAMBDA 192
    #define N1 112
    #define N1_BITS_TWICE 14
    #define M 54
    #define T 3
    #define N2 32
    #define THETA_TREE 5
    #define TAU 46
    #define SK_SIZE 24
    #define PK_SIZE 230
    #define SECURITY_BYTES 24
    #define SHAKE_BLOCK_SIZE 136
    #define Keccak_HashInitialize_SHAKE Keccak_HashInitialize_SHAKE256  // SHAKE256
    #define Keccak_HashInitialize_SHA3  Keccak_HashInitialize_SHA3_384

#elif FAST35
    #ifdef KAT
        #define SKSEED memcpy(sk->seed, (uint8_t[]){0x79, 0x67, 0x32, 0xac, 0xba, 0x3e, 0xfd, 0xf7, 0x31, 0xbf, 0x7c, 0x24, 0x2a, 0xee, 0xdd, 0xf5, 0xeb, 0xa5, 0xb1, 0x31, 0xda, 0x90, 0xe3, 0x6a}, sizeof(sk->seed));
        #define PKSEED memcpy(pk->seed, (uint8_t[]){0x91, 0x61, 0x8f, 0xe9, 0x9a, 0x8f, 0x94, 0x20, 0x49, 0x7b, 0x24, 0x6f, 0x73, 0x5b, 0x27, 0xa0, 0x19, 0x07, 0x8a, 0x9d, 0x3c, 0xa6, 0xb2, 0xa0}, sizeof(pk->seed));

        #define MSEED memcpy(random, (uint8_t[]){0xd5, 0xfd, 0x28, 0x49, 0x3b, 0x1e, 0x8b, 0x4d, 0x77, 0xee, 0x15, 0xf3, 0x65, 0x4f, 0x70, 0xc6, 0x4a, 0xa6, 0x54, 0x73, 0xbd, 0xd1, 0x19, 0x9d, 0xbc, 0x4b, 0xa7, 0xd9, 0xbd, 0xcb, 0xda, 0xf8, 0x2b, 0x0b, 0xca, 0x86, 0x4d, 0x79, 0x44, 0xfa, 0xa4, 0x0e, 0x94, 0xbf, 0x3b, 0xc3, 0x27, 0x4d, 0x7e, 0x68, 0xb5, 0x03, 0x56, 0x70, 0x20, 0x5d, 0x4b, 0xfc, 0xab, 0x25, 0x84, 0x7e, 0x71, 0xa1, 0xf1, 0x29, 0x74, 0x80, 0xd5, 0xc7, 0xcd, 0x36}, sizeof(random));
    #endif
    #define LAMBDA 192
    #define N1 116
    #define N1_BITS_TWICE 14
    #define M 55
    #define T 5
    #define N2 32
    #define THETA_TREE 5
    #define TAU 43
    #define SK_SIZE 24
    #define PK_SIZE 370
    #define SECURITY_BYTES 24
    #define SHAKE_BLOCK_SIZE 136
    #define Keccak_HashInitialize_SHAKE Keccak_HashInitialize_SHAKE256  // SHAKE256
    #define Keccak_HashInitialize_SHA3  Keccak_HashInitialize_SHA3_384

#elif SHORT33
    #ifdef KAT
        #define SKSEED memcpy(sk->seed, (uint8_t[]){0x79, 0x67, 0x32, 0xac, 0xba, 0x3e, 0xfd, 0xf7, 0x31, 0xbf, 0x7c, 0x24, 0x2a, 0xee, 0xdd, 0xf5, 0xeb, 0xa5, 0xb1, 0x31, 0xda, 0x90, 0xe3, 0x6a}, sizeof(sk->seed));
        #define PKSEED memcpy(pk->seed, (uint8_t[]){0x91, 0x61, 0x8f, 0xe9, 0x9a, 0x8f, 0x94, 0x20, 0x49, 0x7b, 0x24, 0x6f, 0x73, 0x5b, 0x27, 0xa0, 0x19, 0x07, 0x8a, 0x9d, 0x3c, 0xa6, 0xb2, 0xa0}, sizeof(pk->seed));

        #define MSEED memcpy(random, (uint8_t[]){0xd5, 0xfd, 0x28, 0x49, 0x3b, 0x1e, 0x8b, 0x4d, 0x77, 0xee, 0x15, 0xf3, 0x65, 0x4f, 0x70, 0xc6, 0x4a, 0xa6, 0x54, 0x73, 0xbd, 0xd1, 0x19, 0x9d, 0xbc, 0x4b, 0xa7, 0xd9, 0xbd, 0xcb, 0xda, 0xf8, 0x2b, 0x0b, 0xca, 0x86, 0x4d, 0x79, 0x44, 0xfa, 0xa4, 0x0e, 0x94, 0xbf, 0x3b, 0xc3, 0x27, 0x4d, 0x7e, 0x68, 0xb5, 0x03, 0x56, 0x70, 0x20, 0x5d, 0x4b, 0xfc, 0xab, 0x25, 0x84, 0x7e, 0x71, 0xa1, 0xf1, 0x29, 0x74, 0x80, 0xd5, 0xc7, 0xcd, 0x36}, sizeof(random));
    #endif
    #define LAMBDA 192
    #define N1 112
    #define N1_BITS_TWICE 14
    #define M 54
    #define T 3
    #define N2 256
    #define THETA_TREE 8
    #define TAU 31
    #define SK_SIZE 24
    #define PK_SIZE 230
    #define SECURITY_BYTES 24
    #define SHAKE_BLOCK_SIZE 136
    #define Keccak_HashInitialize_SHAKE Keccak_HashInitialize_SHAKE256  // SHAKE256
    #define Keccak_HashInitialize_SHA3  Keccak_HashInitialize_SHA3_384

#elif SHORT35
    #ifdef KAT
        #define SKSEED memcpy(sk->seed, (uint8_t[]){0x79, 0x67, 0x32, 0xac, 0xba, 0x3e, 0xfd, 0xf7, 0x31, 0xbf, 0x7c, 0x24, 0x2a, 0xee, 0xdd, 0xf5, 0xeb, 0xa5, 0xb1, 0x31, 0xda, 0x90, 0xe3, 0x6a}, sizeof(sk->seed));
        #define PKSEED memcpy(pk->seed, (uint8_t[]){0x91, 0x61, 0x8f, 0xe9, 0x9a, 0x8f, 0x94, 0x20, 0x49, 0x7b, 0x24, 0x6f, 0x73, 0x5b, 0x27, 0xa0, 0x19, 0x07, 0x8a, 0x9d, 0x3c, 0xa6, 0xb2, 0xa0}, sizeof(pk->seed));

        #define MSEED memcpy(random, (uint8_t[]){0xd5, 0xfd, 0x28, 0x49, 0x3b, 0x1e, 0x8b, 0x4d, 0x77, 0xee, 0x15, 0xf3, 0x65, 0x4f, 0x70, 0xc6, 0x4a, 0xa6, 0x54, 0x73, 0xbd, 0xd1, 0x19, 0x9d, 0xbc, 0x4b, 0xa7, 0xd9, 0xbd, 0xcb, 0xda, 0xf8, 0x2b, 0x0b, 0xca, 0x86, 0x4d, 0x79, 0x44, 0xfa, 0xa4, 0x0e, 0x94, 0xbf, 0x3b, 0xc3, 0x27, 0x4d, 0x7e, 0x68, 0xb5, 0x03, 0x56, 0x70, 0x20, 0x5d, 0x4b, 0xfc, 0xab, 0x25, 0x84, 0x7e, 0x71, 0xa1, 0xf1, 0x29, 0x74, 0x80, 0xd5, 0xc7, 0xcd, 0x36}, sizeof(random));
    #endif
    #define LAMBDA 192
    #define N1 116
    #define N1_BITS_TWICE 14
    #define M 55
    #define T 5
    #define N2 256
    #define THETA_TREE 8
    #define TAU 28
    #define SK_SIZE 24
    #define PK_SIZE 370
    #define SECURITY_BYTES 24
    #define SHAKE_BLOCK_SIZE 136
    #define Keccak_HashInitialize_SHAKE Keccak_HashInitialize_SHAKE256  // SHAKE256
    #define Keccak_HashInitialize_SHA3  Keccak_HashInitialize_SHA3_384

#elif FAST53
    #ifdef KAT
        #define SKSEED memcpy(sk->seed, (uint8_t[]){0x79, 0x67, 0x32, 0xac, 0xba, 0x3e, 0xfd, 0xf7, 0x31, 0xbf, 0x7c, 0x24, 0x2a, 0xee, 0xdd, 0xf5, 0xeb, 0xa5, 0xb1, 0x31, 0xda, 0x90, 0xe3, 0x6a, 0xf2, 0x3a, 0x3b, 0xce, 0x9c, 0x7a, 0xa9, 0x3a}, sizeof(sk->seed));
        #define PKSEED memcpy(pk->seed, (uint8_t[]){0x91, 0x61, 0x8f, 0xe9, 0x9a, 0x8f, 0x94, 0x20, 0x49, 0x7b, 0x24, 0x6f, 0x73, 0x5b, 0x27, 0xa0, 0x19, 0x07, 0x8a, 0x9d, 0x3c, 0xa6, 0xb2, 0xa0, 0x01, 0xae, 0xc0, 0xb9, 0xe0, 0x7e, 0x68, 0x0b}, sizeof(pk->seed));

        #define MSEED memcpy(random, (uint8_t[]){0xd5, 0xfd, 0x28, 0x49, 0x3b, 0x1e, 0x8b, 0x4d, 0x77, 0xee, 0x15, 0xf3, 0x65, 0x4f, 0x70, 0xc6, 0x4a, 0xa6, 0x54, 0x73, 0xbd, 0xd1, 0x19, 0x9d, 0xbc, 0x4b, 0xa7, 0xd9, 0xbd, 0xcb, 0xda, 0xf8, 0x2b, 0x0b, 0xca, 0x86, 0x4d, 0x79, 0x44, 0xfa, 0xa4, 0x0e, 0x94, 0xbf, 0x3b, 0xc3, 0x27, 0x4d, 0x7e, 0x68, 0xb5, 0x03, 0x56, 0x70, 0x20, 0x5d, 0x4b, 0xfc, 0xab, 0x25, 0x84, 0x7e, 0x71, 0xa1, 0xf1, 0x29, 0x74, 0x80, 0xd5, 0xc7, 0xcd, 0x36, 0xec, 0x1f, 0x73, 0x5c, 0x53, 0x0f, 0x92, 0x5c, 0xc7, 0xb7, 0x84, 0x47, 0xa8, 0x8d, 0x8a, 0x99, 0x89, 0x67, 0x2d, 0x7a, 0xde, 0x4d, 0x65, 0x0b}, sizeof(random));
    #endif
    #define LAMBDA 256
    #define N1 146
    #define N1_BITS_TWICE 15
    #define M 75
    #define T 3
    #define N2 32
    #define THETA_TREE 5
    #define TAU 61
    #define SK_SIZE 32
    #define PK_SIZE 310
    #define SECURITY_BYTES 32
    #define SHAKE_BLOCK_SIZE 136
    #define Keccak_HashInitialize_SHAKE Keccak_HashInitialize_SHAKE256  // SHAKE256
    #define Keccak_HashInitialize_SHA3  Keccak_HashInitialize_SHA3_512

#elif FAST55
    #ifdef KAT
        #define SKSEED memcpy(sk->seed, (uint8_t[]){0x79, 0x67, 0x32, 0xac, 0xba, 0x3e, 0xfd, 0xf7, 0x31, 0xbf, 0x7c, 0x24, 0x2a, 0xee, 0xdd, 0xf5, 0xeb, 0xa5, 0xb1, 0x31, 0xda, 0x90, 0xe3, 0x6a, 0xf2, 0x3a, 0x3b, 0xce, 0x9c, 0x7a, 0xa9, 0x3a}, sizeof(sk->seed));
        #define PKSEED memcpy(pk->seed, (uint8_t[]){0x91, 0x61, 0x8f, 0xe9, 0x9a, 0x8f, 0x94, 0x20, 0x49, 0x7b, 0x24, 0x6f, 0x73, 0x5b, 0x27, 0xa0, 0x19, 0x07, 0x8a, 0x9d, 0x3c, 0xa6, 0xb2, 0xa0, 0x01, 0xae, 0xc0, 0xb9, 0xe0, 0x7e, 0x68, 0x0b}, sizeof(pk->seed));

        #define MSEED memcpy(random, (uint8_t[]){0xd5, 0xfd, 0x28, 0x49, 0x3b, 0x1e, 0x8b, 0x4d, 0x77, 0xee, 0x15, 0xf3, 0x65, 0x4f, 0x70, 0xc6, 0x4a, 0xa6, 0x54, 0x73, 0xbd, 0xd1, 0x19, 0x9d, 0xbc, 0x4b, 0xa7, 0xd9, 0xbd, 0xcb, 0xda, 0xf8, 0x2b, 0x0b, 0xca, 0x86, 0x4d, 0x79, 0x44, 0xfa, 0xa4, 0x0e, 0x94, 0xbf, 0x3b, 0xc3, 0x27, 0x4d, 0x7e, 0x68, 0xb5, 0x03, 0x56, 0x70, 0x20, 0x5d, 0x4b, 0xfc, 0xab, 0x25, 0x84, 0x7e, 0x71, 0xa1, 0xf1, 0x29, 0x74, 0x80, 0xd5, 0xc7, 0xcd, 0x36, 0xec, 0x1f, 0x73, 0x5c, 0x53, 0x0f, 0x92, 0x5c, 0xc7, 0xb7, 0x84, 0x47, 0xa8, 0x8d, 0x8a, 0x99, 0x89, 0x67, 0x2d, 0x7a, 0xde, 0x4d, 0x65, 0x0b}, sizeof(random));
    #endif
    #define LAMBDA 256
    #define N1 150
    #define N1_BITS_TWICE 15
    #define M 76
    #define T 5
    #define N2 32
    #define THETA_TREE 5
    #define TAU 57
    #define SK_SIZE 32
    #define PK_SIZE 510
    #define SECURITY_BYTES 32
    #define SHAKE_BLOCK_SIZE 136
    #define Keccak_HashInitialize_SHAKE Keccak_HashInitialize_SHAKE256  // SHAKE256
    #define Keccak_HashInitialize_SHA3  Keccak_HashInitialize_SHA3_512

#elif SHORT53
    #ifdef KAT
        #define SKSEED memcpy(sk->seed, (uint8_t[]){0x79, 0x67, 0x32, 0xac, 0xba, 0x3e, 0xfd, 0xf7, 0x31, 0xbf, 0x7c, 0x24, 0x2a, 0xee, 0xdd, 0xf5, 0xeb, 0xa5, 0xb1, 0x31, 0xda, 0x90, 0xe3, 0x6a, 0xf2, 0x3a, 0x3b, 0xce, 0x9c, 0x7a, 0xa9, 0x3a}, sizeof(sk->seed));
        #define PKSEED memcpy(pk->seed, (uint8_t[]){0x91, 0x61, 0x8f, 0xe9, 0x9a, 0x8f, 0x94, 0x20, 0x49, 0x7b, 0x24, 0x6f, 0x73, 0x5b, 0x27, 0xa0, 0x19, 0x07, 0x8a, 0x9d, 0x3c, 0xa6, 0xb2, 0xa0, 0x01, 0xae, 0xc0, 0xb9, 0xe0, 0x7e, 0x68, 0x0b}, sizeof(pk->seed));

        #define MSEED memcpy(random, (uint8_t[]){0xd5, 0xfd, 0x28, 0x49, 0x3b, 0x1e, 0x8b, 0x4d, 0x77, 0xee, 0x15, 0xf3, 0x65, 0x4f, 0x70, 0xc6, 0x4a, 0xa6, 0x54, 0x73, 0xbd, 0xd1, 0x19, 0x9d, 0xbc, 0x4b, 0xa7, 0xd9, 0xbd, 0xcb, 0xda, 0xf8, 0x2b, 0x0b, 0xca, 0x86, 0x4d, 0x79, 0x44, 0xfa, 0xa4, 0x0e, 0x94, 0xbf, 0x3b, 0xc3, 0x27, 0x4d, 0x7e, 0x68, 0xb5, 0x03, 0x56, 0x70, 0x20, 0x5d, 0x4b, 0xfc, 0xab, 0x25, 0x84, 0x7e, 0x71, 0xa1, 0xf1, 0x29, 0x74, 0x80, 0xd5, 0xc7, 0xcd, 0x36, 0xec, 0x1f, 0x73, 0x5c, 0x53, 0x0f, 0x92, 0x5c, 0xc7, 0xb7, 0x84, 0x47, 0xa8, 0x8d, 0x8a, 0x99, 0x89, 0x67, 0x2d, 0x7a, 0xde, 0x4d, 0x65, 0x0b}, sizeof(random));
    #endif
    #define LAMBDA 256
    #define N1 146
    #define N1_BITS_TWICE 15
    #define M 75
    #define T 3
    #define N2 256
    #define THETA_TREE 8
    #define TAU 41
    #define SK_SIZE 32
    #define PK_SIZE 310
    #define SECURITY_BYTES 32
    #define SHAKE_BLOCK_SIZE 136
    #define Keccak_HashInitialize_SHAKE Keccak_HashInitialize_SHAKE256  // SHAKE256
    #define Keccak_HashInitialize_SHA3  Keccak_HashInitialize_SHA3_512

#else //SHORT55
    #ifdef KAT
        #define SKSEED memcpy(sk->seed, (uint8_t[]){0x79, 0x67, 0x32, 0xac, 0xba, 0x3e, 0xfd, 0xf7, 0x31, 0xbf, 0x7c, 0x24, 0x2a, 0xee, 0xdd, 0xf5, 0xeb, 0xa5, 0xb1, 0x31, 0xda, 0x90, 0xe3, 0x6a, 0xf2, 0x3a, 0x3b, 0xce, 0x9c, 0x7a, 0xa9, 0x3a}, sizeof(sk->seed));
        #define PKSEED memcpy(pk->seed, (uint8_t[]){0x91, 0x61, 0x8f, 0xe9, 0x9a, 0x8f, 0x94, 0x20, 0x49, 0x7b, 0x24, 0x6f, 0x73, 0x5b, 0x27, 0xa0, 0x19, 0x07, 0x8a, 0x9d, 0x3c, 0xa6, 0xb2, 0xa0, 0x01, 0xae, 0xc0, 0xb9, 0xe0, 0x7e, 0x68, 0x0b}, sizeof(pk->seed));

        #define MSEED memcpy(random, (uint8_t[]){0xd5, 0xfd, 0x28, 0x49, 0x3b, 0x1e, 0x8b, 0x4d, 0x77, 0xee, 0x15, 0xf3, 0x65, 0x4f, 0x70, 0xc6, 0x4a, 0xa6, 0x54, 0x73, 0xbd, 0xd1, 0x19, 0x9d, 0xbc, 0x4b, 0xa7, 0xd9, 0xbd, 0xcb, 0xda, 0xf8, 0x2b, 0x0b, 0xca, 0x86, 0x4d, 0x79, 0x44, 0xfa, 0xa4, 0x0e, 0x94, 0xbf, 0x3b, 0xc3, 0x27, 0x4d, 0x7e, 0x68, 0xb5, 0x03, 0x56, 0x70, 0x20, 0x5d, 0x4b, 0xfc, 0xab, 0x25, 0x84, 0x7e, 0x71, 0xa1, 0xf1, 0x29, 0x74, 0x80, 0xd5, 0xc7, 0xcd, 0x36, 0xec, 0x1f, 0x73, 0x5c, 0x53, 0x0f, 0x92, 0x5c, 0xc7, 0xb7, 0x84, 0x47, 0xa8, 0x8d, 0x8a, 0x99, 0x89, 0x67, 0x2d, 0x7a, 0xde, 0x4d, 0x65, 0x0b}, sizeof(random));
    #endif
    #define LAMBDA 256
    #define N1 150
    #define N1_BITS_TWICE 15
    #define M 76
    #define T 5
    #define N2 256
    #define THETA_TREE 8
    #define TAU 37
    #define SK_SIZE 32
    #define PK_SIZE 510
    #define SECURITY_BYTES 32
    #define SHAKE_BLOCK_SIZE 136
    #define Keccak_HashInitialize_SHAKE Keccak_HashInitialize_SHAKE256  // SHAKE256
    #define Keccak_HashInitialize_SHA3  Keccak_HashInitialize_SHA3_512

#endif  // Perk version


#define N_MASK ((1U << THETA_TREE) - 1)
#define SIGNATURE_BYTES                                                                                     \
    (2*SECURITY_BYTES + (2 * 2*SECURITY_BYTES) + (2*SECURITY_BYTES + SECURITY_BYTES * THETA_TREE) * TAU +   \
     ((TAU * N1 * 10 + 7) / 8) +                                                                            \
     ((TAU * N1 * N1_BITS_TWICE / 2 + 7) / 8))
#define PK_BYTES (SECURITY_BYTES + ((M*10*T+7)/8))

#endif  // ifndef